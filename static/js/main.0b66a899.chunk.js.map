{"version":3,"sources":["header.js","form.js","footer.js","results.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Form","props","onChangeValue","e","preventDefault","console","log","target","value","url","method","setState","superagent","get","then","data","handler","state","onSubmit","this","className","id","type","name","for","defaultChecked","React","Component","Footer","Results","src","headers","results","App","handleForm","count","body","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAUiBA,G,YARF,WACX,OACE,iCACI,2C,iBCsDOC,E,kDAtDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,cAAgB,SAACC,GACfA,EAAEC,iBACFC,QAAQC,IAAIH,EAAEI,OAAOC,OAErB,IAAIC,EAAMN,EAAEI,OAAOE,IAAID,MACnBE,EAASP,EAAEI,OAAOG,OAAOF,MAC7B,EAAKG,SAAS,CAAEF,MAAKC,WAErBE,IAAWC,IAAIJ,GACdK,MAAK,SAAAC,GACL,EAAKd,MAAMe,QAAQD,OAhBpB,EAAKE,MAAQ,CACXR,IAAK,IACLC,OAAQ,KALO,E,qDA6BjB,OACE,8BACE,uBAAMQ,SAAUC,KAAKjB,cAAekB,UAAY,UAAhD,UACE,wCACA,uBAAOC,GAAG,MAAMC,KAAK,MAAMC,KAAK,QAChC,wBAAQD,KAAK,SAAb,mBACA,gCACE,uBAAOE,IAAI,SAAX,iBACA,uBAAOF,KAAK,QAAQG,gBAAc,EAACjB,MAAM,OAAOe,KAAK,WACrD,uBAAOC,IAAI,SAAX,kBACA,uBAAOF,KAAK,QAAQd,MAAM,QAAQe,KAAK,WACvC,uBAAOC,IAAI,SAAX,oBACA,uBAAOF,KAAK,QAAQd,MAAM,UAAUe,KAAK,WACzC,uBAAOC,IAAI,SAAX,iBACA,uBAAOF,KAAK,QAAQd,MAAM,OAAOe,KAAK,uB,GA7CjCG,IAAMC,WCMRC,G,MAPF,WACX,OACE,iCACI,2D,gBCUKC,EAZA,SAAC5B,GACR,OACI,8BACA,gCACI,cAAC,IAAD,CAAWsB,KAAK,UAAUO,IAAK7B,EAAM8B,UACrC,cAAC,IAAD,CAAWR,KAAK,WAAWO,IAAK7B,EAAM+B,gBC+BvCC,E,kDA9Bb,WAAYhC,GAAO,IAAD,8BAChB,cAAMA,IAQRiC,WAAa,SAACnB,GAEZ,IAAIoB,EAAQpB,EAAKqB,KAAKD,MAClBH,EAAUjB,EAAKqB,KACfL,EAAQhB,EAAKgB,QACjB,EAAKpB,SAAS,CAACwB,MAAMA,EAAMH,QAAQA,EAAQD,QAAQA,KAZnD,EAAKd,MAAO,CACVkB,MAAM,EACNH,QAAQ,GACVD,QAAQ,IALQ,E,qDAkBlB,OACE,qCACA,cAAE,EAAF,IACA,cAAC,EAAD,CAAMf,QAASG,KAAKe,aACpB,cAAC,EAAD,CAASC,MAAOhB,KAAKF,MAAMkB,MAAOH,QAASb,KAAKF,MAAMe,QAASD,QAASZ,KAAKF,MAAMc,UACnF,cAAC,EAAD,W,GAxBcL,IAAMC,WCITU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0b66a899.chunk.js","sourcesContent":["import './header.scss';\n\nconst Header = () => {\n    return (\n      <header>\n          <h1>RESTy</h1>\n      </header>\n    )\n  }\n\n  export default Header;","import React from 'react';\nimport superagent from 'superagent';\n\nclass Form extends React.Component {\n\n    constructor(props) {\n      super(props);\n      // add state.words here and initialize it\n      this.state = {\n        url: ' ',\n        method: ' '\n      }\n    }\n  \n    onChangeValue = (e) => {\n      e.preventDefault();\n      console.log(e.target.value);\n  \n      let url = e.target.url.value;\n      let method = e.target.method.value;\n      this.setState({ url, method });\n  \n      superagent.get(url)\n      .then(data => {\n       this.props.handler(data)\n  \n         \n         })\n  \n    }\n  \n  \n  \n    render() {\n      return (\n        <div>\n          <form onSubmit={this.onChangeValue} className = \"content\">\n            <label>URL</label>\n            <input id=\"url\" type=\"url\" name=\"url\" />\n            <button type=\"submit\"> GO !</button>\n            <div>\n              <label for=\"method\">Get</label>\n              <input type=\"radio\" defaultChecked value=\"Get \" name=\"method\" />\n              <label for=\"method\">Post</label>\n              <input type=\"radio\" value=\"Post \" name=\"method\" />\n              <label for=\"method\">Delete</label>\n              <input type=\"radio\" value=\"Delete \" name=\"method\" />\n              <label for=\"method\">Put</label>\n              <input type=\"radio\" value=\"Put \" name=\"method\" />\n            </div>\n  \n          </form>\n  \n      \n        </div>\n      )\n    }\n  }\n  \n  export default Form;","import './footer.scss';\n\nconst Footer = () => {\n    return (\n      <footer>\n          <h1>Â©2018 Code Fellows</h1>\n      </footer>\n    )\n  }\n  export default Footer;","import React from 'react';\nimport ReactJson from 'react-json-view';\n\nconst Results =(props)=>{\n        return(\n            <div>\n            <div>\n                <ReactJson name=\"headers\" src={props.headers} />\n                <ReactJson name=\"response\" src={props.results} />\n\n            </div>\n        </div>\n        )\n    }\n\nexport default Results;","import React from 'react';\nimport './App.scss';\nimport Header from './header.js';\nimport Form from './form.js';\nimport Footer from './footer.js';\nimport Results from './results';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      count:0,\n      results:[],\n    headers:[]\n    }\n  }\n\n  handleForm = (data) => {\n   \n    let count = data.body.count;\n    let results = data.body;\n    let headers=data.headers;\n    this.setState({count:count,results:results,headers:headers});\n}\n\n  render(){\n  return (\n    <>\n    < Header />\n    <Form handler={this.handleForm}/>\n    <Results count={this.state.count} results={this.state.results} headers={this.state.headers}/>\n    <Footer />\n    </>\n  )\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}